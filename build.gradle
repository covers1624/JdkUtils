plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "com.gradleup.shadow" version "8.3.2"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
    withJavadocJar()
}

group 'net.covers1624'
archivesBaseName = "JdkUtils"
version '0.6.0'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of ${archivesBaseName}, Version: ${version}"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.covers1624.net/' }
}

configurations {
    testLibs
    testImplementation.extendsFrom testLibs
}

dependencies {
    api 'org.slf4j:slf4j-api:1.7.32'
    api 'net.covers1624:Quack:0.4.10.108'

    api 'com.google.code.gson:gson:2.8.9'

    api 'org.apache.commons:commons-compress:1.26.1'

    compileOnly 'org.ow2.asm:asm:9.2'
    api('net.rubygrapefruit:native-platform:0.21') {
        transitive = false
    }
    api 'net.rubygrapefruit:native-platform-windows-amd64:0.21'
    api 'net.rubygrapefruit:native-platform-windows-i386:0.21'

    api('org.apache.maven:maven-artifact:3.8.4') {
        transitive = false
    }

    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testLibs 'net.sf.jopt-simple:jopt-simple:5.0.4'
    testLibs 'org.ow2.asm:asm:9.2'
    testLibs 'com.squareup.okhttp3:okhttp:4.9.3'
    testLibs 'org.apache.logging.log4j:log4j-core:2.23.1'
    testLibs 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

jar {
    finalizedBy 'signJar'
    from file("LICENSE.txt")
}

shadowJar {
    archiveClassifier = 'test'
    configurations = [project.configurations.runtimeClasspath, project.configurations.testLibs]
    mergeServiceFiles()
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)

    from sourceSets.main.output
    from sourceSets.test.output
}

tasks.register('signJar') {
    dependsOn('jar')

    doFirst {
        def args = [:]
        args['jar'] = jar.archiveFile.get().asFile
        if (System.getenv("KEY_STORE")) {
            args['keyStore'] = System.getenv("KEY_STORE")
            file(System.getenv("KEY_STORE_PROPS")).withReader {
                def props = new Properties()
                props.load(it)
                args.putAll(props)
            }
        } else if (project.hasProperty('keyStore')) {
            args['keyStore'] = project.getProperty('keyStore')
            args['alias'] = project.getProperty('keyStoreAlias')
            args['storePass'] = project.getProperty('keyStorePass')
            args['keyPass'] = project.getProperty('keyStoreKeyPass')
        } else {
            println "No signing properties."
            state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
            didWork = false
            return
        }
        project.ant.invokeMethod('signjar', args)
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        JdkUtils(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            from components['java']

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/covers1624/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/covers1624/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/covers1624/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:covers1624/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/covers1624/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/covers1624/${archivesBaseName}/master/LICENSE.txt".toString()
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.JdkUtils
}
